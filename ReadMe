##the backend implementation for the Capstone Project, provides API endpoints for authentication, event management, user roles, and community communications.

# #My backend structure will cover schemas for essentials aspects like memberships, events, communication 

# #Schemas (Memberships, Events, Communications)

# #MemberSchema 
#     . Name {type: String, required}
#     . email {type: string, validation, required}
#     . password {type: string, required }
#     . role {type: string, enum: ['member', 'admin'], default: 'member'}
#     . joinedAt: {type: date, default: date.now}

# #EventSchema 
#     . title: {type: string}
#     . description: {type: string}
#     . date: {type: date, required}
#     . location: string

# # CommunicationSchema
#     . title: {type: string, required}
#     . content: {type: string, required}
#     . createdAt: {type: Date, default: Date.now}


# #Backend Routes (* Full CRUD on all Schema)

# #MembersRoutes
#     . Post
#     . Get
#     . Update
#     . Delete

# #EventsRoutes
#     . Post
#     . Get
#     . Update
#     . Delete

# #CommunicationsRoutes
#     . Post
#     . Get
#     . Update
#     . Delete

#Resources

##User authentication (JWT-based)
##Role-based access control (admin & members)
##CRUD operations for events & announcements
##Secure API endpoints
##MongoDB database integration

  ##Routes 

#POST	/api/auth/signup	Register a new user
#POST	/api/auth/login	Authenticate user
#GET	/api/event	Get all events
#POST	/api/event	Create a new event
#PUT	/api/event/:id	Update an event
#DELETE	/api/event/:id	Delete an event
#GET	/api/comm	Get all announcements
#POST	/api/comm	Create an announcement

# #Middleware
#     . Auth
#     . AuthAdmin
    

